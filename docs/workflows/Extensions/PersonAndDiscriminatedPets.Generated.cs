//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace PersonAndDiscriminatedPets
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Cat : Pet
    {
    
        private int _age;
    
        private bool _canMeow;
    
        public Cat()
        {
            _canMeow = true;
        }
    
        protected Cat(Cat other) : 
                base(other)
        {
            _age = other._age;
            _canMeow = other._canMeow;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="age")]
        public int Age
        {
            get
            {
                return _age;
            }
            set
            {
                _age = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="can_meow")]
        public bool CanMeow
        {
            get
            {
                return _canMeow;
            }
            set
            {
                _canMeow = value;
            }
        }
    
        public System.IObservable<Cat> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Cat(this)));
        }
    
        public System.IObservable<Cat> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Cat(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Age = " + _age + ", ");
            stringBuilder.Append("CanMeow = " + _canMeow);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Dog : Pet
    {
    
        private int _age;
    
        private bool _canBark;
    
        public Dog()
        {
            _canBark = true;
        }
    
        protected Dog(Dog other) : 
                base(other)
        {
            _age = other._age;
            _canBark = other._canBark;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="age")]
        public int Age
        {
            get
            {
                return _age;
            }
            set
            {
                _age = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="can_bark")]
        public bool CanBark
        {
            get
            {
                return _canBark;
            }
            set
            {
                _canBark = value;
            }
        }
    
        public System.IObservable<Dog> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Dog(this)));
        }
    
        public System.IObservable<Dog> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Dog(this));
        }
    
        protected override bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            if (base.PrintMembers(stringBuilder))
            {
                stringBuilder.Append(", ");
            }
            stringBuilder.Append("Age = " + _age + ", ");
            stringBuilder.Append("CanBark = " + _canBark);
            return true;
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [YamlDiscriminator("pet_type")]
    [JsonInheritanceAttribute("dog", typeof(Dog))]
    [JsonInheritanceAttribute("cat", typeof(Cat))]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class Pet
    {
    
        public Pet()
        {
        }
    
        protected Pet(Pet other)
        {
        }
    
        public System.IObservable<Pet> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Pet(this)));
        }
    
        public System.IObservable<Pet> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Pet(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            return false;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    [Bonsai.CombinatorAttribute(MethodName="Generate")]
    public partial class PersonAndPet
    {
    
        private string _owner;
    
        private Pet _pet;
    
        public PersonAndPet()
        {
        }
    
        protected PersonAndPet(PersonAndPet other)
        {
            _owner = other._owner;
            _pet = other._pet;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="owner")]
        public string Owner
        {
            get
            {
                return _owner;
            }
            set
            {
                _owner = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="pet")]
        public Pet Pet
        {
            get
            {
                return _pet;
            }
            set
            {
                _pet = value;
            }
        }
    
        public System.IObservable<PersonAndPet> Generate()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PersonAndPet(this)));
        }
    
        public System.IObservable<PersonAndPet> Generate<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PersonAndPet(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("Owner = " + _owner + ", ");
            stringBuilder.Append("Pet = " + _pet);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.9.0.0 (Newtonsoft.Json v13.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; private set; }

        public System.Type Type { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Combinator)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Dog>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Cat>))]
    public partial class MatchPet : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = Type;
            var returnType = typeMapping != null ? typeMapping.GetType().GetGenericArguments()[0] : typeof(Pet);
            return System.Linq.Expressions.Expression.Call(
                typeof(MatchPet),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

    
        private static System.IObservable<TResult> Process<TResult>(System.IObservable<Pet> source)
            where TResult : Pet
        {
            return System.Reactive.Linq.Observable.Create<TResult>(observer =>
            {
                var sourceObserver = System.Reactive.Observer.Create<Pet>(
                    value =>
                    {
                        var match = value as TResult;
                        if (match != null) observer.OnNext(match);
                    },
                    observer.OnError,
                    observer.OnCompleted);
                return System.ObservableExtensions.SubscribeSafe(source, sourceObserver);
            });
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [System.AttributeUsageAttribute((System.AttributeTargets.Class | System.AttributeTargets.Interface))]
    public class YamlDiscriminatorAttribute : System.Attribute
    {
    
        public YamlDiscriminatorAttribute(string discriminator)
        {
            Discriminator = discriminator;
        }

        public string Discriminator { get; private set; }

    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    public class YamlDiscriminatorTypeInspector : YamlDotNet.Serialization.TypeInspectors.ReflectionTypeInspector
    {
    
        readonly YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor;

        public YamlDiscriminatorTypeInspector(YamlDotNet.Serialization.ITypeInspector innerTypeDescriptor)
        {
            if (innerTypeDescriptor == null)
            {
                throw new System.ArgumentNullException("innerTypeDescriptor");
            }

            this.innerTypeDescriptor = innerTypeDescriptor;
        }

        public override System.Collections.Generic.IEnumerable<YamlDotNet.Serialization.IPropertyDescriptor> GetProperties(System.Type type, object container)
        {
            var innerProperties = innerTypeDescriptor.GetProperties(type, container);

            var discriminatorAttribute = (YamlDiscriminatorAttribute)System.Attribute.GetCustomAttribute(type, typeof(YamlDiscriminatorAttribute));
            var inheritanceAttributes = (JsonInheritanceAttribute[])System.Attribute.GetCustomAttributes(type, typeof(JsonInheritanceAttribute));
            var typeMatch = System.Array.Find(inheritanceAttributes, attribute => attribute.Type == type);
            if (discriminatorAttribute != null && typeMatch != null)
            {
                return System.Linq.Enumerable.Concat(new[]
                {
                    new DiscriminatorPropertyDescriptor(discriminatorAttribute.Discriminator, typeMatch.Key)
                }, innerProperties);
            }

            return innerProperties;
        }

        class DiscriminatorPropertyDescriptor : YamlDotNet.Serialization.IPropertyDescriptor
        {
            readonly string key;

            public DiscriminatorPropertyDescriptor(string discriminator, string value)
            {
                ScalarStyle = YamlDotNet.Core.ScalarStyle.Plain;
                Name = discriminator;
                key = value;
            }

            public string Name { get; private set; }

            public bool Required
            {
                get { return true; }
            }

            public bool CanWrite
            {
                get { return true; }
            }

            public System.Type Type
            {
                get { return typeof(string); }
            }

            public System.Type TypeOverride { get; set; }

            public System.Type ConverterType
            {
                get { return null; }
            }

            public bool AllowNulls
            {
                get { return false; }
            }

            public int Order { get; set; }

            public YamlDotNet.Core.ScalarStyle ScalarStyle { get; set; }

            public T GetCustomAttribute<T>() where T : System.Attribute
            {
                return null;
            }

            public YamlDotNet.Serialization.IObjectDescriptor Read(object target)
            {
                return new YamlDotNet.Serialization.ObjectDescriptor(key, Type, Type, ScalarStyle);
            }

            public void Write(object target, object value)
            {
            }
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [Bonsai.CombinatorAttribute()]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .WithTypeInspector(inspector => new YamlDiscriminatorTypeInspector(inspector))
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<Cat> source)
        {
            return Process<Cat>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Dog> source)
        {
            return Process<Dog>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Pet> source)
        {
            return Process<Pet>(source);
        }

        public System.IObservable<string> Process(System.IObservable<PersonAndPet> source)
        {
            return Process<PersonAndPet>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.6.0.0 (YamlDotNet v16.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Cat>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Dog>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Pet>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PersonAndPet>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<PersonAndPet>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static void AddTypeDiscriminator<T>(YamlDotNet.Serialization.BufferedDeserialization.ITypeDiscriminatingNodeDeserializerOptions o)
        {
            var baseType = typeof(T);
            var discriminator = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<YamlDiscriminatorAttribute>(baseType).Discriminator;
            var typeMapping = System.Linq.Enumerable.ToDictionary(
                System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(baseType),
                attr => attr.Key,
                attr => attr.Type);
            o.AddKeyValueTypeDiscriminator<T>(discriminator, typeMapping);
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .WithTypeInspector(inspector => new YamlDiscriminatorTypeInspector(inspector))
                    .WithTypeDiscriminatingNodeDeserializer(o =>
                    {
                        AddTypeDiscriminator<Pet>(o);
                    })
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}